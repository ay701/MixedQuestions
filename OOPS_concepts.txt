Abstraction
--------------------------------
Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
Abstraction is the concept of hiding the internal details and describing things in simple terms. For example, a method that adds two integers. The method internal processing is hidden from outer world. There are many ways to achieve abstraction in object oriented programming, such as encapsulation and inheritance.
A java program is also a great example of abstraction. Here java takes care of converting simple statements to machine language and hides the inner implementation details from outer world.

Encapsulation
--------------------------------
Encapsulation is the technique used to implement abstraction in object oriented programming.
Encapsulation is used for access restriction to a class members and methods.
Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example capsule, it is wrapped with different medicines.
Access modifier keywords are used for encapsulation in object oriented programming. For example, encapsulation in java is achieved using private, protected and public keywords.

Polymorphism
--------------------------------
Polymorphism is the concept where an object behaves differently in different situations.
There are two types of polymorphism â€“ compile time polymorphism and runtime polymorphism.
Compile time polymorphism is achieved by method overloading. For example, we can have a class as below.
circle can draw, rectangle can draw too but differently

Inheritance
--------------------------------
Inheritance is the object oriented programming concept where an object is based on another object.
Inheritance is the mechanism of code reuse.
The object that is getting inherited is called superclass and the object that inherits the superclass is called subclass.
We use extends keyword in java to implement inheritance. Below is a simple example of inheritance in java.

Benefits: (Advantage of OOPs over Procedure-oriented programming language)
--------------------------------
- Code reuse
- Easy to maintain
1) OOPs makes development and maintenance easier whereas in a procedure-oriented programming language it is not easy to manage if code grows as project size increases.
2) OOPs provides data hiding whereas in a procedure-oriented programming language a global data can be accessed from anywhere.