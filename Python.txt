- Benefits of using Python

Huge standard of standard libraries
Python does not require explicit memory management as the interpreter itself allocates the memory to new variables and free them automatically
Provide easy readability due to use of square brackets
Easy-to-learn for beginners
Built-in data types saves programming time and effort from declaring variables

- List comprehension & Dictionary comprehension

It's a concise way to create lists.

- map(), reduce(), filter(), zip() examples

map functions expects a function object and any number of iterables like list, dictionary, etc.
It executes the function_object for each element in the sequence and returns a list of the elements modified by the function object.

map(function_object, iterable1, iterable2,...)

def multiply2(x):
  return x * 2

map(multiply2, [1, 2, 3, 4])  # Output [2, 4, 6, 8]

list_a = [1, 2, 3]
list_b = [10, 20, 30]

map(lambda x, y: x + y, list_a, list_b) # Output: [11, 22, 33]

filter function expects two arguments, function_object and an iterable.
function_object returns a boolean value.
function_object is called for each element of the iterable and filter returns only those element for which the function_object returns true.

filter(function_object, iterable)

number_list = range(-5, 5)
less_than_zero = list(filter(lambda x: x < 0, number_list))
print(less_than_zero)

# Output: [-5, -4, -3, -2, -1]

Reduce is a really useful function for performing some computation on a list and returning the result. It applies a rolling computation to sequential pairs of values in a list. For example, if you wanted to compute the product of a list of integers.

from functools import reduce
product = reduce((lambda x, y: x * y), [1, 2, 3, 4])

# Output: 24

The zip() function returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, and then the second item in each passed iterator are paired together etc.
If the passed iterators have different lengths, the iterator with least items decides the length of the new iterator.

a = ("John", "Charles", "Mike")
b = ("Jenny", "Christy", "Monica", "Vicky")

x = zip(a, b)

#use the tuple() function to display a readable version of the result:

print(tuple(x))

(('John', 'Jenny'), ('Charles', 'Christy'), ('Mike', 'Monica'))

- Module vs Package

In Python, module is the way to structure program.
Each Python program file is a module, which imports other modules like objects and attributes.
The folder of Python program is a package of modules. A package can have modules or subfolders.

- What is generator?

The way of implementing iterators are known as generators.
It is a normal function except that it yields expression in the function.

- What is decorator?

Decorator is a function, which takes a function as argument, define a wrapper function inside adding logic to that function, and return it.
Decorators wrap a function, modifying its behavior.

Example:

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_whee():
    print("Whee!")

- What is Lamba?

A single expression anonymous function often used as inline function.
A lambda form does not have statements as it is used to make new function object and then return them at runtime.

- What is pass?

No-operation Python statement. It is a place holder (in compound statement), where there should be a blank left and nothing has to be written there.

- What modules used often?

functools - map(), reduce(), filter() functions
os - https://docs.python.org/3/library/os.html
random - https://docs.python.org/3/library/random.html
numPy - http://cs231n.github.io/python-numpy-tutorial/
itertools - https://docs.python.org/3/library/itertools.html
  // Permutation, accumulate, groupby, product
unittest - https://docs.python.org/3/library/unittest.html
pychecker - static analysis tool that detects the bugs in Python source code and warns about the style and complexity of the bug.
pylink - tool that verifies whether the module meets the coding standard.

- Pickling and unpickling?

Pickle module accepts any Python object and converts it into a string representation and dumps it into a file by using dump function, this process is called pickling. 
While the process of retrieving original Python objects from the stored string representation is called unpickling.

- How memory is managed in Python?

Python memory is managed by Python private heap space.
All Python objects and data structures are located in a private heap.
The programmer does not have an access to this private heap and interpreter takes care of this Python private heap.
The allocation of Python heap space for Python objects is done by Python memory manager.
The core API gives access to some tools for the programmer to code.
Python also have an inbuilt garbage collector, which recycle all the unused memory and frees the memory and makes it available to the heap space.

- Passed by value or by reference?

- Python data types:

Numbers
String
Tuple

Set
List
Dictionary


- What is library for Python multithreading?

threading Module 
multiprocessing Module

Every process has at least one thread, i.e. the process itself.
A process can start multiple threads.
The operating system executes these threads like parallel "processes".
On a single processor machine, this parallelism is achieved by thread scheduling or timeslicing.

Advantages of Threading:
================================================
Multithreaded programs can run faster on computer systems with multiple CPUs, because theses threads can be executed truly concurrent.
A program can remain responsive to input. This is true both on single and on multiple CPU
Threads of a process can share the memory of global variables.
If a global variable is changed in one thread, this change is valid for all threads.
A thread can have local variables.


What is asyncio — Asynchronous I/O ?
================================================
asyncio is a library to write concurrent code using the async/await syntax.
asyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, database connection libraries, distributed task queues, etc.
asyncio is often a perfect fit for IO-bound and high-level structured network code.


asyncio provides a set of high-level APIs to:
================================================
run Python coroutines concurrently and have full control over their execution;
perform network IO and IPC;
control subprocesses;
distribute tasks via queues;
synchronize concurrent code;


Hello World! Example

import asyncio

async def main():
    print('Hello ...')
    await asyncio.sleep(1)
    print('... World!')

# Python 3.7+
asyncio.run(main())


What is context manager?
================================================
https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/

Perhaps the most common (and important) use of context managers is to properly manage resources,
for example: "with" to open file

create a context manager. The simplest is to define a class that contains two special methods: __enter__() and __exit__().
__enter__() returns the resource to be managed (like a file object in the case of open()).
__exit__() does any cleanup work and returns nothing.

class File():

    def __init__(self, filename, mode):
        self.filename = filename
        self.mode = mode

    def __enter__(self):
        self.open_file = open(self.filename, self.mode)
        return self.open_file

    def __exit__(self, *args):
        self.open_file.close()

files = []
for _ in range(10000):
    with File('foo.txt', 'w') as infile:
        infile.write('foo')
        files.append(infile)


Other Useful Context Managers
Given that context managers are so helpful, they were added to the Standard Library in a number of places.
Lock objects in threading are context managers, as are zipfile.ZipFiles. subprocess.Popen, tarfile.TarFile, telnetlib.Telnet, pathlib.Path... the list goes on and on.
Essentially, any object that needs to have close called on it after use is (or should be) a context manager.



What is the Python Global Interpreter Lock (GIL)?
=====================================================
The Python Global Interpreter Lock or GIL, in simple words, is a mutex (or a lock) that allows only one thread to hold the control of the Python interpreter.
This means that only one thread can be in a state of execution at any point in time.
The impact of the GIL isn’t visible to developers who execute single-threaded programs, but it can be a performance bottleneck in CPU-bound and multi-threaded code.
Since the GIL allows only one thread to execute at a time even in a multi-threaded architecture with more than one CPU core, the GIL has gained a reputation as an “infamous” feature of Python.

Python uses reference counting for memory management. It means that objects created in Python have a reference count variable that keeps track of the number of references that point to the object.
When this count reaches zero, the memory occupied by the object is released.


Duck Typing

===========

Duck typing in computer programming is an application of the duck test—"If it walks like a duck and it quacks like a duck, then it must be a duck"—to determine if an object can be used for a particular purpose. With normal typing, suitability is determined by an object's type. In duck typing, an object's suitability is determined by the presence of certain methods and properties, rather than the type of the object itself.

Example
This is a simple example in Python 3 that demonstrates how any object may be used in any context, up until it is used in a way that it does not support.

class Duck:
    def fly(self):
        print("Duck flying")

class Airplane:
    def fly(self):
        print("Airplane flying")

class Whale:
    def swim(self):
        print("Whale swimming")

def lift_off(entity):
    entity.fly()

duck = Duck()
airplane = Airplane()
whale = Whale()

lift_off(duck) # prints `Duck flying`
lift_off(airplane) # prints `Airplane flying`
lift_off(whale) # Throws the error `'Whale' object has no attribute 'fly'`



Class method vs Static Method

================================================

A class method takes cls as first parameter while a static method needs no specific parameters.
A class method can access or modify class state while a static method can’t access or modify it.
In general, static methods know nothing about class state. They are utility type methods that take some parameters and work upon those parameters. On the other hand class methods must have class as parameter.
We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create a static method in python.
When to use what?

We generally use class method to create factory methods. Factory methods return class object ( similar to a constructor ) for different use cases.
We generally use static methods to create utility functions.
How to define a class method and a static method?

To define a class method in python, we use @classmethod decorator and to define a static method we use @staticmethod decorator.
Let us look at an example to understand the difference between both of them. Let us say we want to create a class Person. Now, python doesn’t support method overloading like C++ or Java so we use class methods to create factory methods. In the below example we use a class method to create a person object from birth year.

As explained above we use static methods to create utility functions. In the below example we use a static method to check if a person is adult or not.

Implementation

# Python program to demonstrate
# use of class method and static method.
from datetime import date

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # a class method to create a Person object by birth year.
    @classmethod
    def fromBirthYear(cls, name, year):
        return cls(name, date.today().year - year)

    # a static method to check if a Person is adult or not.
    @staticmethod
    def isAdult(age):
        return age > 18

person1 = Person('mayank', 21)
person2 = Person.fromBirthYear('mayank', 1996)

print person1.age
print person2.age

# print the result
print Person.isAdult(22)